#!/bin/bash

if [ -e "util/universe.v" ]
then
    echo "util/universe.v already exists"
else
    echo "coping util/universe-type.v to util/universe.v"
    cp util/universe-type.v util/universe.v
fi

if [ -e "per/universe2.v" ]
then
    echo "per/universe2.v already exists"
else
    echo "coping per/universe2_prop.v to per/universe2.v"
    cp per/universe2_prop.v per/universe2.v
fi

if [ -e "per/choice.v" ]
then
    echo "per/choice.v already exists"
else
    echo "coping per/choice-prop.v to per/choice.v"
    cp per/choice-prop.v per/choice.v
fi

function get_deps () {
    grep "^Require" $1.v \
    | sed 's/Require Import \(.*\)\..*$/\1/' \
    | sed 's/Require Export \(.*\)\..*$/\1/' \
    | sed 's/Require \(.*\)\..*$/\1/'
}

containsElement () {
    local e
    for e in "${@:2}"; do
	[[ "$e" == "$1" ]] && return 0;
    done
    return 1
}

declare -A aa
declare -a remfiles
declare -a allfiles
#declare -a temp

remfiles=("rules")
allfiles=("rules")

echo "`date`" > debug

while true
do
    #printf '%s\n' "==+== ${remfiles[@]} ==+=="
    if [[ ${#remfiles[@]} -eq 0 ]]
    then
	echo "++++++ no more files" >> debug
	break
    else
	file=${remfiles[0]}
	remfiles=("${remfiles[@]:1}")
	#printf '%s\n' "++=++ ${remfiles[@]} ++=++"
	echo "===============================" >> debug
	echo "++++++ file: ${file}" >> debug

	temp=`get_deps $file`
	deps=()
	for f in $temp
	do
	    if [ -e "${f}.v" ]
	    then deps+=("$f")
	    else
		if [ -e "close/${f}.v" ]
		then deps+=("close/$f")
		else
		    if [ -e "axiom_choice/${f}.v" ]
		    then deps+=("axiom_choice/$f")
		    else
			if [ -e "bar_induction/${f}.v" ]
			then deps+=("bar_induction/$f")
			else
			    if [ -e "cequiv/${f}.v" ]
			    then deps+=("cequiv/$f")
			    else
				if [ -e "computation/${f}.v" ]
				then deps+=("computation/$f")
				else
				    if [ -e "continuity/${f}.v" ]
				    then deps+=("continuity/$f")
				    else
					if [ -e "per/${f}.v" ]
					then deps+=("per/$f")
					else
					    if [ -e "rules/${f}.v" ]
					    then deps+=("rules/$f")
					    else
						if [ -e "terms/${f}.v" ]
						then deps+=("terms/$f")
						else
						    if [ -e "util/${f}.v" ]
						    then deps+=("util/$f")
						    else echo "${f} doesn't exist" >> debug
						    fi
						fi
					    fi
					fi
				    fi
				fi
			    fi
			fi
		    fi
		fi
	    fi
	done
	#printf '%s\n' "++=++ ${deps[@]} ++=++"
	#deps=("${temp[@]}")

	aa[$file]=${deps[@]}

	for i in "${deps[@]}"
	do
	    #echo "checking $i"
	    containsElement "$i" "${allfiles[@]}"
	    n=$?
	    if [[ $n -eq 1 ]]
	    then
		echo "++ new dependency: ${i}" >> debug
		remfiles=("${remfiles[@]}" "$i")
		allfiles=("${allfiles[@]}" "$i")
	    else echo "++ not new dependency: ${i}" >> debug
	    fi
	done
    fi
done

echo "# Makefile generated by create_makefile.sh" > Makefile
echo "" >> Makefile
echo "default : rules.vo" >> Makefile

echo "" >> Makefile
echo "clean :" >> Makefile
echo "	rm -f .*.aux               *.glob               *.vo"               >> Makefile
echo "	rm -f close/.*.aux         close/*.glob         close/*.vo"         >> Makefile
echo "	rm -f axiom_choice/.*.aux  axiom_choice/*.glob  axiom_choice/*.vo"  >> Makefile
echo "	rm -f bar_induction/.*.aux bar_induction/*.glob bar_induction/*.vo" >> Makefile
echo "	rm -f cequiv/.*.aux        cequiv/*.glob        cequiv/*.vo"        >> Makefile
echo "	rm -f computation/.*.aux   computation/*.glob   computation/*.vo"   >> Makefile
echo "	rm -f continuity/.*.aux    continuity/*.glob    continuity/*.vo"    >> Makefile
echo "	rm -f per/.*.aux           per/*.glob           per/*.vo"           >> Makefile
echo "	rm -f rules/.*.aux         rules/*.glob         rules/*.vo"         >> Makefile
echo "	rm -f terms/.*.aux         terms/*.glob         terms/*.vo"         >> Makefile
echo "	rm -f util/.*.aux          util/*.glob          util/*.vo"          >> Makefile

for i in "${!aa[@]}"
do
    #echo "-------------------"
    #echo "++ ${i}"

    echo "" >> Makefile
    echo -n "${i}.vo : ${i}.v" >> Makefile

    if [[ ${#aa[$i]} -eq 0 ]]
    then
	echo "${i} doesn't have dependencies"
    else
	#echo "${aa[$i]}"
	IFS=' ' read -a vals <<< "${aa[$i]}"
	for f in "${vals[@]}"
	do
	    #echo "---- ${f}"
	    echo -n " ${f}.vo" >> Makefile
	done
    fi

    echo "" >> Makefile
    echo "	coqc -R axiom_choice axiom_choice -R bar_induction bar_induction -R cequiv cequiv -R close close -R computation computation -R continuity continuity -R per per -R rules rules -R terms terms -R util util ${i}.v" >> Makefile
done
